Шаги разработки программы:                                                           1. Договоренности с заказчиком
2. Псевдокод (                                                                       -> Вывести отработанные часы
-> Вывести почасовую ставку
-> Расчитать зарпату до удержки, как произведение отработанных часов и ставки оплаты
труда
-> Показать зарплату
)
3. Блок-схем
- Овал (начало и конец)
- Параллелограмм (входные данные)
- Прямоугольник (операция работы с данными)
4. Вход. Обработка. Выход
5. Вывод данных на экран
                                                                                     
""" ... """ - заключают в себя "..", '..' и строки между ними с новой строки
------------------


переменные
тип данных:
- целое число int
- дробное(вещественное) float
- строковые str


определить тип данных значения:
type(значение)

input() - всегда str!
для преобразования типа используем int() float()
pay = int(input(...))

/ результат с плавающей точкой
// результат целочисленный 
*(при -5//2  результат округляется в большую сторону)
** возведение в степень

a = [34, 22,10]
b = c = a	#переменные ссылаются на объект другой переменной
b[0] = 100	# изменение объекта через любые ссылающиеся переменные

a ** b ** c = a ** (b ** c)	#порядок возведения в степень справа на лево

# %
total_second = float(input('Enter value second: '))
hours = total_second // 3600
minutes = (total_second // 60) % 60
second = total_second % 60
print('You enter ', hours, 'hours, ', minutes, 'minutes, ', second, 'second, ')


общак
внос
процент
годы
общак = внос * 12% ** 10лет



#вычисляем сумму вноса
future_value = float(input('Enter all have money: '))
rate = float(input('Enter percent in year: '))	#interest rate
years = float(input('Enter years all: '))

percent_value = future_value / (1.0 + rate) ** years	#insert money/ years

print('You need insert ', percent_value)

#разбитие на несколько строк 1 строки
result = var * 2 + var * 3 + var * 4 + \
    var * 5 + var * 6
print("Продажи в понедельник составили", monday,                                         "во вторник они составили", tuesday,
    "и в среду они составили", 33 + 43,
    value1 + value2 +                                                                    value3 + value4)
____________________________________________________________



Конкатенация сроковых литералов ("Привет " + "мир")
print('Enter value ' +
	'days all ' +
	'end enter OK')
(можно без "+" тоже самое)



print('one' 'two' 'three')
onetwothree



С новых строк:
print()
print()
print()
На одной строке One Two Tree:
print('One', end=' ')
print('Two', end=' ')
print('Tree')
(Тоже самое но без пробела: end='')

не печатать пробелы(как по дефолту) между выводом значений print()
print('One', 'Two', 'Three', sep='')
также определяет какой символ будет напечатан sep='*'



экранирование символов \
символы для экранирования n t ' " \


f-строки
name = 'John'
print(f'Hello, {name}!')	#местозаполнители

val = 3463464.62446311
print(f'Output: {val + 7}')

payment = val / 7
print(f'Output: {payment:.2f}') # 2 - 0.00 / 3 - 0.0000 (:.3f)

print(f'{val:,}')	# 3,463,464.62446311

print(f'{val:,.2f}')	# 3,463,464.62

val = 0.5
print(f'{val:%}')	# {val:.0%} -> 50%
50.000000%


#вывод в научной нотации
val = 1251251.5398922
print(f'{val:e}')
1.251252e+06
Научная нотация:
    число 1234567 можно представить в научной нотации как 1.234567 x 10^6, где мантисса равна 1.234567, а степень десяти равна 6.

val = 123456
print(f'Hello {val:,d}')	# 123,456


# ширина поля количество знаков вывода
val = 99
print(f'минимальное количество знаков вывода {val:10}')	# знаков числа val
# {val:12,.2f} - ширина полей 12 , разделитель 2f знаков после точки

# выравнивание
default  str-left, number-right
< > ^
{val:<10f} (left)

val1 = 'Gordon'
print(f'***{val1:^20}***')

#concarenation f-srt
print(f'Name: {name:}, ' +
	f'Last name: {lastname}, ' +
	f'Address: {address}')
# output - one string

# если в коде есть неопознаваемые значения, являющиеся магическими числами, они заменяются "Именованными константами"
INTEREST_RATE = 0.069

--------------------------

#Turtle graphic
import turtle	#module
turtle.showturtle()	# интерактивный режим отображения черепахи в окне
turtle.forvard(200)	# вперед на 200
turtle.left()	#угол left 
turtle.right()	#corner right
turtle.setheading()	#угол относительно начального движения. постоянно повторять команду для изменения угла
turtle.heading()	#узнаить текущий угол черепахи

# подняте и опускание пера
turtle.penup()	# pen up
turtle.pendown()	# pen down

turtle.circle(100)	#круг, радиус 100 
turtle.dot()	#нарисовать точку

turtle.pensize(5)	#толщина пера

turtle.pencolor('red')	#color (str literal 'black' / '#000000')

turtle.bgcolor('grey')	#color background

turtle.reset()	# стирает рисунки, черный цыет рисунка и черепаха в исходном месте
turtle.clear()	# стирает рисунки
turtle.clearscreen	# стирает рисунки, цвет пера черный, цвет фона белый, черепаха в исходном положении

turtle.setup(640, 480)	# размер графического экрана (шир, выс)

turtle.goto(x, y)	# перемещение черепахи в конкретную позицию в графической системе координат

turtle.pos()	# вывести текущую позицию черепахи
turtle.xcor()	# position X
turtle.ycor()	# position Y

turtle.speed()	# скорость передвижения черепахи/ 0(отключит анимацию) от 1 до 10 (по возрастанию)
turtle.speed(без аргументов) - покажет текущую анимацию

turtle.hideturtle()	# не отображать значек черепахи
turtle.showturtle()	# отобразить значек черепахи

turtle.write('Hello, world')	# вывод текста в графическом окне


turtle.begin_fill()	# заполнение геометр-ой фигуры цветом(перед началом рисования)
turtle.end_fill()	# после начертания фигуры
turtle.fillcolor('red')	# изменние цвета заливки фигуры. По дефолту - black!




